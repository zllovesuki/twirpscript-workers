"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/proto/hat.proto
/* eslint-disable */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.HatJSON = exports.SizeJSON = exports.Hat = exports.Size = exports.createHaberdasher = exports.MakeHatJSON = exports.MakeHat = exports.MIN_SUPPORTED_VERSION_0_0_56 = void 0;
var protoscript_1 = require("protoscript");
var twirpscript_1 = require("twirpscript");
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
var twirpscript_2 = require("twirpscript");
__createBinding(exports, twirpscript_2, "MIN_SUPPORTED_VERSION_0_0_56");
//========================================//
//      Haberdasher Protobuf Client       //
//========================================//
/**
 * MakeHat produces a hat of mysterious, randomly-selected color!
 */
function MakeHat(size, config) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, twirpscript_1.PBrequest)("/Haberdasher/MakeHat", exports.Size.encode(size), config)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, exports.Hat.decode(response)];
            }
        });
    });
}
exports.MakeHat = MakeHat;
//========================================//
//        Haberdasher JSON Client         //
//========================================//
/**
 * MakeHat produces a hat of mysterious, randomly-selected color!
 */
function MakeHatJSON(size, config) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, twirpscript_1.JSONrequest)("/Haberdasher/MakeHat", exports.SizeJSON.encode(size), config)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, exports.HatJSON.decode(response)];
            }
        });
    });
}
exports.MakeHatJSON = MakeHatJSON;
function createHaberdasher(service) {
    return {
        name: "Haberdasher",
        methods: {
            MakeHat: {
                name: "MakeHat",
                handler: service.MakeHat,
                input: { protobuf: exports.Size, json: exports.SizeJSON },
                output: { protobuf: exports.Hat, json: exports.HatJSON }
            }
        }
    };
}
exports.createHaberdasher = createHaberdasher;
//========================================//
//        Protobuf Encode / Decode        //
//========================================//
exports.Size = {
    /**
     * Serializes Size to protobuf.
     */
    encode: function (msg) {
        return exports.Size._writeMessage(msg, new protoscript_1.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes Size from protobuf.
     */
    decode: function (bytes) {
        return exports.Size._readMessage(exports.Size.initialize(), new protoscript_1.BinaryReader(bytes));
    },
    /**
     * Initializes Size with all fields set to their default value.
     */
    initialize: function () {
        return {
            inches: 0
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.inches) {
            writer.writeInt32(1, msg.inches);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            var field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.inches = reader.readInt32();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    }
};
exports.Hat = {
    /**
     * Serializes Hat to protobuf.
     */
    encode: function (msg) {
        return exports.Hat._writeMessage(msg, new protoscript_1.BinaryWriter()).getResultBuffer();
    },
    /**
     * Deserializes Hat from protobuf.
     */
    decode: function (bytes) {
        return exports.Hat._readMessage(exports.Hat.initialize(), new protoscript_1.BinaryReader(bytes));
    },
    /**
     * Initializes Hat with all fields set to their default value.
     */
    initialize: function () {
        return {
            inches: 0,
            color: "",
            name: ""
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg, writer) {
        if (msg.inches) {
            writer.writeInt32(1, msg.inches);
        }
        if (msg.color) {
            writer.writeString(2, msg.color);
        }
        if (msg.name) {
            writer.writeString(3, msg.name);
        }
        return writer;
    },
    /**
     * @private
     */
    _readMessage: function (msg, reader) {
        while (reader.nextField()) {
            var field = reader.getFieldNumber();
            switch (field) {
                case 1: {
                    msg.inches = reader.readInt32();
                    break;
                }
                case 2: {
                    msg.color = reader.readString();
                    break;
                }
                case 3: {
                    msg.name = reader.readString();
                    break;
                }
                default: {
                    reader.skipField();
                    break;
                }
            }
        }
        return msg;
    }
};
//========================================//
//          JSON Encode / Decode          //
//========================================//
exports.SizeJSON = {
    /**
     * Serializes Size to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(exports.SizeJSON._writeMessage(msg));
    },
    /**
     * Deserializes Size from JSON.
     */
    decode: function (json) {
        return exports.SizeJSON._readMessage(exports.SizeJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes Size with all fields set to their default value.
     */
    initialize: function () {
        return {
            inches: 0
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        var json = {};
        if (msg.inches) {
            json["inches"] = msg.inches;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        var _inches_ = json["inches"];
        if (_inches_) {
            msg.inches = _inches_;
        }
        return msg;
    }
};
exports.HatJSON = {
    /**
     * Serializes Hat to JSON.
     */
    encode: function (msg) {
        return JSON.stringify(exports.HatJSON._writeMessage(msg));
    },
    /**
     * Deserializes Hat from JSON.
     */
    decode: function (json) {
        return exports.HatJSON._readMessage(exports.HatJSON.initialize(), JSON.parse(json));
    },
    /**
     * Initializes Hat with all fields set to their default value.
     */
    initialize: function () {
        return {
            inches: 0,
            color: "",
            name: ""
        };
    },
    /**
     * @private
     */
    _writeMessage: function (msg) {
        var json = {};
        if (msg.inches) {
            json["inches"] = msg.inches;
        }
        if (msg.color) {
            json["color"] = msg.color;
        }
        if (msg.name) {
            json["name"] = msg.name;
        }
        return json;
    },
    /**
     * @private
     */
    _readMessage: function (msg, json) {
        var _inches_ = json["inches"];
        if (_inches_) {
            msg.inches = _inches_;
        }
        var _color_ = json["color"];
        if (_color_) {
            msg.color = _color_;
        }
        var _name_ = json["name"];
        if (_name_) {
            msg.name = _name_;
        }
        return msg;
    }
};
